function rpd = IUFWT_2(ac, vc, hc, dc, wt, fbi, scaling)
    % --------------------------------------------------------------------------
    %
    % Function: IUFWT_2(ac, vc, hc, dc, wt, fbi, scaling)
    %
    % --------------------------------------------------------------------------
    %
    % Use:
    %       -- f = IUFWT_2(ac, vc, hc, dc, wt, fbi)
    %       -- f = IUFWT_2(ac, vc, hc, dc, wt, fbi, scaling)
    %
    % Description:
    %      Compute the inverse 2D wavelet transform for the given coefficients
    %      matrices using the wavelet filterbank wt and the number fbi of
    %      filterbank iterations.
    %
    % Function parameters:
    %       -- ac: residual approximation coefficients stored in H x W matrix.
    %       -- vc: vertical detail coefficients stored in
    %             fbi x (filt_no - 1) x H x W matrix.
    %       -- hc: horizontal detail coefficients stored in
    %             fbi x (filt_no - 1) x H x W matrix.
    %       -- dc: diagonal detail coefficients stored in
    %             fbi x (filt_no - 1) x (filt_no - 1) x H x W matrix.
    %       -- wt: wavelet filterbank
    %       -- fbi: number of filterbank iterations
    %       -- scaling: filter scaling flag (default: 'sqrt')
    %
    % Return:
    %       -- rpd: reconstructed image
    %
    % Required packages:
    %       -- ltfat (http://ltfat.org)
    %
    % Example:
    %       -- rpd = IUFWT_2(ac, vc, hc, dc, wt, fbi)
    %       -- rpd = IUFWT_2(ac, vc, hc, dc, wt, fbi, 'sqrt')
    %
    % Copyright (C) 2005-2022 Peter L. Soendergaard <peter@sonderport.dk>
    % and others.
    % Modifications Copyright (C) 2023 Ljubomir Kurij
    % <ljubomir_kurij@protonmail.com>.
    % This file is part of LTFAT version 2.5.0
    %
    % This program is free software: you can redistribute it and/or modify
    % it under the terms of the GNU General Public License as published by
    % the Free Software Foundation, either version 3 of the License, or
    % (at your option) any later version.
    %
    % This program is distributed in the hope that it will be useful,
    % but WITHOUT ANY WARRANTY; without even the implied warranty of
    % MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    % GNU General Public License for more details.
    %
    % You should have received a copy of the GNU General Public License
    % along with this program.  If not, see <http://www.gnu.org/licenses/>.
    %
    % --------------------------------------------------------------------------

    fname = 'IUFWT_2';
    use_case_a = sprintf(' -- rpd = %s(ac, vc, hc, dc, wt, fbi)', fname);
    use_case_b = sprintf( ...
                         cstrcat( ...
                                 ' -- rpd = %s(ac, vc, hc, dc, wt, fbi, ', ...
                                 'scaling)' ...
                                ), ...
                         fname ...
                        );

    % Add the ltfat package to the path ----------------------------------------
    pkg load ltfat;

    % Check input parameters ---------------------------------------------------

    % Check the number of input parameters
    if 6 ~= nargin && 7 ~= nargin
        % Invalid call to function
        error( ...
              'Invalid call to %s. Correct usage is:\n%s\n%s', ...
              fname, ...
              use_case_a, ...
              use_case_b ...
             );

    end  % End of if 6 ~= nargin && 7 ~= nargin

    % Validate value(s) supplied for the wavelet filterbank definition
    try
        wt = fwtinit(wt);

    catch err
        error( ...
              '%s: %s', ...
              fname, ...
              err.message ...
             );

    end  % End of try-catch block

    % This could be removed with some effort. The question is, are there such
    % wavelet filters? If your filterbank has different subsampling factors
    % after first two filters, please send a feature request.
    assert( ...
           wt.a(1) == wt.a(2), ...
           cstrcat( ...
                   'First two elements of a vector wt.a are not equal. ', ...
                   'Such wavelet filterbank is not suported.' ...
                  ) ...
          );

    % For holding the time-reversed, complex conjugate impulse responses.
    filt_no = length(wt.g);

    % Validate value supplied for the number of filterbank iterations
    validateattributes( ...
                       fbi, ...
                       {'numeric'}, ...
                       { ...
                        'scalar', ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan', ...
                        'integer', ...
                        'positive', ...
                        '>=', 1 ...
                       }, ...
                       fname, ...
                       'fbi' ...
                      );

    % Validate input coeficients format
    validateattributes( ...
                       ac, ...
                       {'float'}, ...
                       { ...
                        '2d', ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan' ...
                       }, ...
                       fname, ...
                       'ac' ...
                      );

    [H, W] = size(ac);

    validateattributes( ...
                       vc, ...
                       {'float'}, ...
                       { ...
                        'ndims', 4, ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan' ...
                       }, ...
                       fname, ...
                       'vc' ...
                      );

    if fbi ~= size(vc, 1)
        error( ...
              cstrcat( ...
                      fname, ...
                      ': Number of levels in the coefficients matrix vc ', ...
                      ' does not match given number of filterbank ', ...
                      'iterations fbi.' ...
                     ) ...
             );

    elseif filt_no - 1 ~= size(vc, 2)
        error( ...
              cstrcat( ...
                      fname, ...
                      ': Number of coefficients in the coefficients ', ...
                      'matrix vc does not match number of ', ...
                      'filterbank filters' ...
                     ) ...
             );

    elseif H ~= size(vc, 3) || W ~= size(vc, 4)
        error( ...
              cstrcat( ...
                      fname, ...
                      ': Size of coefficients matrix vc does not match', ...
                      ' the size of residuals matrix ac.' ...
                     ) ...
             );

    end  % End of if fbi ~= size(vc, 1)

    validateattributes( ...
                       hc, ...
                       {'float'}, ...
                       { ...
                        'ndims', 4, ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan' ...
                       }, ...
                       fname, ...
                       'hc' ...
                      );

    if fbi ~= size(hc, 1)
        error( ...
              cstrcat( ...
                      fname, ...
                      ': Number of levels in the coefficients matrix hc ', ...
                      'does not match given number of filterbank ', ...
                      'iterations fbi.' ...
                     ) ...
             );

    elseif filt_no - 1 ~= size(hc, 2)
        error( ...
              cstrcat( ...
                      fname, ...
                      ': Number of coefficients in the coefficients ', ...
                      'matrix hc does not match number of filterbank ', ...
                      'filters.' ...
                     ) ...
             );

    elseif H ~= size(hc, 3) || W ~= size(hc, 4)
        error( ...
              cstrcat( ...
                      fname, ...
                      ': Size of coefficients matrix hc does not match', ...
                      ' the size of residuals matrix ac.' ...
                     ) ...
             );

    end  % End of if fbi ~= size(hc, 1)

    validateattributes( ...
                       dc, ...
                       {'float'}, ...
                       { ...
                        'ndims', 5, ...
                        'finite', ...
                        'nonempty', ...
                        'nonnan' ...
                       }, ...
                       fname, ...
                       'dc' ...
                      );

    if fbi ~= size(dc, 1)
        error( ...
              cstrcat( ...
                      fname, ...
                      ': Number of levels in the coefficients matrix ', ...
                      'dc does not match given number of filterbank ', ...
                      'iterations fbi.' ...
                     ) ...
             );

    elseif filt_no - 1 ~= size(dc, 2) || filt_no - 1 ~= size(dc, 3)
        error( ...
              cstrcat( ...
                      fname, ...
                      ': Number of coefficients in the coefficients ', ...
                      'matrix dc does not match number of filterbank ', ...
                      'filters.' ...
                     ) ...
             );

    elseif H ~= size(dc, 4) || W ~= size(dc, 5)
        error( ...
              cstrcat( ...
                      fname, ...
                      ': Size of coefficients matrix dc does not match', ...
                      ' the size of residuals matrix ac.' ...
                     ) ...
             );

    end  % End of if fbi ~= size(dc, 1)

    % Set default value for the filter scaling if not supplied
    if 6 == nargin
        scaling = 'sqrt';

    end  % End of if 3 == nargin

    % Validate value supplied for the filter scaling
    validatestring( ...
                   scaling, ...
                   {'noscale', 'scale', 'sqrt'}, ...
                   fname, ...
                   'scaling' ...
                  );

    % Use the "oposite" scaling
    if strcmp(scaling, 'scale')
        scaling = 'noscale';

    elseif strcmp(scaling, 'noscale')
        scaling = 'scale';

    end  % End of if strcmp(scaling, 'scale')

    %  Run computation ---------------------------------------------------------

    % For holding the impulse responses.
    gOffset = cellfun(@(gEl) gEl.offset, wt.g(:));

    % Optionally scale the filters
    g = comp_filterbankscale(wt.g(:), wt.a(:), scaling);

    % Change format to a matrix
    gMat = cell2mat(cellfun(@(gEl) gEl.h(:), g(:)', 'UniformOutput', 0));

    % Allocate mid result
    d = zeros(H, filt_no, W);
    e = zeros(filt_no, W, filt_no, H, assert_classname(ac, gMat));

    % Read top-level appr. coefficients.
    ca = ac;
    jj = 1;
    while fbi >= jj
        % Current iteration filter upsampling factor.
        filtUps = wt.a(1)^(fbi - jj);

        % Zero index position of the upsampled filetrs.
        offset = filtUps .* gOffset;  % + filtUps;

        % Run the filterbank --------------------------------------------------

        % Reconstruct rows
        kk = 1;
        while filt_no >= kk
            ll = 1;
            while filt_no >= ll
                if 1 == kk
                    if 1 == ll
                        e(1, :, 1, :) = reshape(ca', 1, W, 1, H);

                    else
                        e(1, :, ll, :) ...
                            = reshape( ...
                                      squeeze(hc(jj, ll - 1, :, :))', ...
                                      1, W, 1, H ...
                                     );

                    end  % End of if 1 == ll

                else
                    if 1 == ll
                        e(kk, :, 1, :) ...
                            = reshape( ...
                                      squeeze(vc(jj, kk - 1, :, :))', ...
                                      1, W, 1, H ...
                                     );

                    else
                        e(kk, :, ll, :) ...
                            = reshape( ...
                                      squeeze(dc( ...
                                                 jj, ...
                                                 kk - 1, ...
                                                 ll - 1, ...
                                                 :, ...
                                                 : ...
                                                ))', ...
                                      1, W, 1, H ...
                                     );

                    end  % End of if 1 == ll

                end  % End of if 1 == kk

                ++ll;

            end  % End of while filt_no >= ll

            ++kk;

        end  % End of while filt_no >= kk

        % Reconstruct columns
        kk = 1;
        while filt_no >= kk
            ie = comp_iatrousfilterbank_td( ...
                                           squeeze(e(kk, :, :, :)), ...
                                           gMat, ...
                                           filtUps, ...
                                           offset ...
                                          )';
            d(:, kk, :) = reshape(ie, H, 1, W);

            ++kk;

        end  % End of while filt_no >= kk

        ca = comp_iatrousfilterbank_td(d, gMat, filtUps, offset);

        ++jj;

    end  % End of while fbi >= jj

    % Copy to the output.
    rpd = ca;

end  % End of function IUFWT_2

% End of file IUFWT_2.m
