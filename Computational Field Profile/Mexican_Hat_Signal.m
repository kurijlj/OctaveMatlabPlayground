function y = Mexican_Hat_Signal(x, x_max, y_max, x_min, nvar)
    %% -------------------------------------------------------------------------
    %%
    %% Function: Mexican_Hat_Signal(x, x_max, y_max, x_min, nvar)
    %%
    %% -------------------------------------------------------------------------
    %
    %% Use:
    %       - y = Mexican_Hat_Signal(x, x_max, y_max, x_min, nvar)
    %
    %% Description:
    %       For the given abscissa x, and the parameters x_max, y_max, x_min,
    %       function returns the value of a Mexican Hat function at a given
    %       point x, or at a set of points x, with a Gaussian noise of
    %       variance nvar.
    %
    %% Function parameters:
    %       - x:     point(s) at which the mexican hat function is evaluated.
    %       - x_max: point at which the function reaches its maximum value.
    %       - y_max: maximum value of the function.
    %       - x_min: point at which the function reaches its minimum value.
    %       - nvar:  variance of the Gaussian noise.
    %
    %% Note:
    %       The minimum value of the function is calculated as:
    %           y_min = -y_max((x_max - x_min)^2 - 1)
    %                   * exp(-(x_max - x_min)^2/((x_max - x_min)^2 - 1))
    %
    %% Examples:
    %       - y = Mexican_Hat_Signal(0, 1, 1, -1, 0)
    %       - y = Mexican_Hat_Signal([0, 1], 1, 1, -1, 0.01)
    %
    %% Copyright (C) 2023 Ljubomir Kurij <ljubomir_kurij@protonmail.com>
    %
    %% -------------------------------------------------------------------------
    fname = 'Mexican_Hat_Signal';
    use_case_a = sprintf(' - y = %s(x, x_max, y_max, x_min, nvar)', fname);

    % Check input arguments ----------------------------------------------------

    % Check number of input arguments
    if 5 ~= nargin
        error( ...
              'Invalid call to %s. Correct usage is:\n%s', ...
              fname, ...
              use_case_a ...
             );
    end  % End of if 5 ~= nargin

    % Check the type of the input arguments
    validateattributes( ...
                       x, ...
                       {'numeric'}, ...
                       {'nonempty', 'nonnan', 'finite', 'real', 'vector'}, ...
                       fname, ...
                       'x' ...
                      );
    validateattributes( ...
                       x_max, ...
                       {'numeric'}, ...
                       {'nonempty', 'nonnan', 'finite', 'real', 'scalar'}, ...
                       fname, ...
                       'x_max' ...
                      );
    validateattributes( ...
                       y_max, ...
                       {'numeric'}, ...
                       {'nonempty', 'nonnan', 'finite', 'real', 'scalar'}, ...
                       fname, ...
                       'y_max' ...
                      );
    validateattributes( ...
                       x_min, ...
                       {'numeric'}, ...
                       {'nonempty', 'nonnan', 'finite', 'real', 'scalar'}, ...
                       fname, ...
                       'x_min' ...
                      );
    validateattributes( ...
                       nvar, ...
                       {'numeric'}, ...
                       { ...
                        'nonempty', ...
                        'nonnan', ...
                        'finite', ...
                        'real', ...
                        'scalar', ...
                        '>=', 0}, ...
                       fname, ...
                       'nvar' ...
                      );

    % Do the calculation -------------------------------------------------------
    y = Mexican_Hat_Function(x, x_max, y_max, x_min);

    % Add Gaussian noise if noise variance is not zero
    if 0 ~= nvar
        y = y + sqrt(nvar) * randn(size(y));
    end  % End of if 0 ~= nvar

end  % End of function 'Mexican_Hat_Signal'

% End of file 'Mexican_Hat_Signal.m'